generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Evento {
  id            Int       @id @default(autoincrement())
  nombre        String
  fecha         DateTime
  horaInicio    String
  horaFin       String
  capacidad     Int
  precioEntrada Float
  ubicacion     String
  descripcion   String
  createdAt     DateTime  @default(now())
  entradas      Entrada[]
}

model Entrada {
  id             Int         @id @default(autoincrement())
  eventoId       Int
  cantidad       Int
  precioUnitario Float
  total          Float
  fechaCompra    DateTime    @default(now())
  socioId        Int?
  createdAt      DateTime    @default(now())
  comprobanteUrl String?
  formaDePago    FormaDePago @default(EFECTIVO)
  evento         Evento      @relation(fields: [eventoId], references: [id])
  socio          Socio?      @relation(fields: [socioId], references: [id])
}

model Socio {
  id              Int          @id @default(autoincrement())
  nombre          String
  apellido        String
  email           String
  fechaNacimiento DateTime
  pais            paisesLatam
  sexo            Sexo
  fotoCarnet      String?
  dni             Int          @unique
  usuarioId       Int          @unique
  estado          String       @default("ACTIVO")
  clases          ClaseSocio[]
  Cuota           Cuota[]
  entradas        Entrada[]
  reservas        Reserva[]
  usuario         Usuario      @relation(fields: [usuarioId], references: [id])
}

model Usuario {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  rol      String
  creadoEn DateTime @default(now())
  socio    Socio?
}

model Actividad {
  id              Int               @id @default(autoincrement())
  nombre          String
  monto           Float
  activo          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  clases          Clase[]
  cuotaXactividad cuotaXactividad[]
}

model Clase {
  id          Int          @id @default(autoincrement())
  diaSemana   DiaSemana
  horaInicio  String
  horaFin     String
  activo      Boolean      @default(true)
  actividadId Int
  profesorId  Int?
  createdAt   DateTime     @default(now())
  actividad   Actividad    @relation(fields: [actividadId], references: [id])
  profesor    Profesor?    @relation(fields: [profesorId], references: [id])
  ClaseSocio  ClaseSocio[]
}

model Cuota {
  id              Int               @id @default(autoincrement())
  fecha_pago      DateTime?         @db.Date
  metodo_pago     FormaDePago
  monto           Decimal           @db.Decimal(12, 3)
  estado          estado_cuota      @default(PENDIENTE)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  socio_id        Int
  mes             Mes?
  comprobantes    Comprobante[]
  Socio           Socio             @relation(fields: [socio_id], references: [id], onUpdate: NoAction)
  cuotaXactividad cuotaXactividad[]

  @@unique([socio_id, mes])
  @@index([estado], map: "id_cuota_estado")
}

model Comprobante {
  id        Int      @id @default(autoincrement())
  cuotaId   Int
  url       String
  activo    Boolean  @default(true)
  subido_en DateTime @default(now())
  Cuota     Cuota    @relation(fields: [cuotaId], references: [id])

  @@unique([cuotaId, activo])
}

model Profesor {
  id        Int      @id @default(autoincrement())
  nombre    String
  apellido  String
  email     String   @unique
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  clases    Clase[]
}

model ClaseSocio {
  id      Int   @id @default(autoincrement())
  claseId Int
  socioId Int
  Clase   Clase @relation(fields: [claseId], references: [id])
  Socio   Socio @relation(fields: [socioId], references: [id])

  @@unique([claseId, socioId])
}

model cuotaXactividad {
  id          Int       @id @default(autoincrement())
  cuotaId     Int
  actividadId Int
  monto       Decimal   @db.Decimal(12, 3)
  Actividad   Actividad @relation(fields: [actividadId], references: [id])
  Cuota       Cuota     @relation(fields: [cuotaId], references: [id])

  @@unique([cuotaId, actividadId])
}

model Reserva {
  id        Int           @id @default(autoincrement())
  cancha    String
  deporte   String
  fecha     DateTime      @db.Date
  hora      String
  estado    EstadoReserva @default(ACTIVA)
  socioId   Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  socio     Socio         @relation(fields: [socioId], references: [id])

  @@unique([cancha, fecha, hora, estado])
  @@index([socioId])
  @@index([fecha])
}

enum Sexo {
  MASCULINO
  FEMENINO
  OTRO
}

enum DiaSemana {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

enum estado_cuota {
  PENDIENTE
  VENCIDA
  PAGADA
  EN_REVISION
}

enum Mes {
  ENERO
  FEBRERO
  MARZO
  ABRIL
  MAYO
  JUNIO
  JULIO
  AGOSTO
  SEPTIEMBRE
  OCTUBRE
  NOVIEMBRE
  DICIEMBRE
}

enum EstadoReserva {
  ACTIVA
  CANCELADA
  COMPLETADA
}

enum FormaDePago {
  CBU
  EFECTIVO
}

enum paisesLatam {
  ARGENTINA
  BOLIVIA
  BRASIL
  CHILE
  COLOMBIA
  COSTA_RICA           @map("COSTA RICA")
  CUBA
  ECUADOR
  EL_SALVADOR          @map("EL SALVADOR")
  GUATEMALA
  HONDURAS
  MEXICO
  NICARAGUA
  PANAMA
  PARAGUAY
  PERU
  PUERTO_RICO          @map("PUERTO RICO")
  REPUBLICA_DOMINICANA @map("REPUBLICA DOMINICANA")
  URUGUAY
  VENEZUELA
}
