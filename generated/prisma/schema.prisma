// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions
// Try Prisma Accelerate https//pris.ly/tip-3-accelerate

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Evento {
  id               Int       @id @default(autoincrement())
  nombre           String
  fecha            DateTime
  horaInicio       String
  horaFin          String
  capacidad        Int
  precioEntrada    Int
  entradasVendidas Int       @default(0)
  montoTotal       Int       @default(0)
  ubicacion        String
  descripcion      String
  entradas         Entrada[] // Relaci√≥n con entradas
  createdAt        DateTime  @default(now())
}

model Entrada {
  id             Int      @id @default(autoincrement())
  eventoId       Int
  evento         Evento   @relation(fields: [eventoId], references: [id])
  cantidad       Int
  precioUnitario Int
  total          Int
  fechaCompra    DateTime @default(now())
  socioId        Int
  socio          Socio    @relation(fields: [socioId], references: [id])
  ubicacion      String
  createdAt      DateTime @default(now())
}

model Socio {
  id              Int       @id @default(autoincrement())
  nombre          String
  apellido        String
  dni             Int       @unique
  email           String
  fechaNacimiento DateTime
  pais            String
  sexo            Sexo
  fotoCarnet      String?
  entradas        Entrada[]
  cuotas          Cuota[]
  usuarioId       Int       @unique
  usuario         Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

enum Sexo {
  M
  F
}

model Usuario {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  rol      String
  creadoEn DateTime @default(now())
  socio    Socio?
}

enum FormaDePago {
  TRANSFERENCIA
  EFECTIVO
}

enum EstadoCuota {
  PENDIENTE
  VENCIDA
  PAGADA
  EN_REVISION
}

model Cuota {
  id          Int          @id @default(autoincrement())
  fechaPago   DateTime
  metodoPago  FormaDePago
  monto       Decimal
  estado      EstadoCuota  @default(PENDIENTE)
  createdAt   DateTime     @default(now())
  socioId     Int          @unique
  socio       Socio        @relation(fields: [socioId], references: [id])
  comprobante Comprobante?
  actividadId Int
  actividad   Actividad    @relation(fields: [actividadId], references: [id])
}

model Comprobante {
  id        Int      @id @default(autoincrement())
  cuotaId   Int      @unique
  cuota     Cuota    @relation(fields: [cuotaId], references: [id], onDelete: Cascade)
  imagenUrl String // URL de la imagen del comprobante
  createdAt DateTime @default(now())
}

model Actividad {
  id        Int      @id @default(autoincrement())
  nombre    String
  monto     Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())
  cuotas    Cuota[]
}
